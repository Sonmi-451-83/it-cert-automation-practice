#!/usr/bin/env python3

import json
import locale
import sys
import operator
import emails
import os
import reports
import requests
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Table


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  #max_sales = {"total_sales": 0}
  #year_keys = list(set( [item["car"]["car_year"] for item in data] ))
  #print(year_keys)
  #best_sales_year_dict = dict.fromkeys(year_keys,0)
  max_sales=0
  most_sales_model=""
  popular={}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    #if item["total_sales"] > max_sales["total_sales"]:
    #      max_sales = item
    # TODO: also handle most popular car_year
    #key = item["car"]["car_year"]
    #sales = item["total_sales"]
    #best_sales_year_dict[key] += sales

    # TODO: also handle max sales
    if item["total_sales"]>max_sales:
       max_sales=item["total_sales"]
       most_sales_model=item["car"]["car_model"]
    # TODO: also handle most popular car_year
    if item["car"]["car_year"] in popular:
       popular[item["car"]["car_year"]]+=item["total_sales"]
    else:
       popular[item["car"]["car_year"]]=item["total_sales"]


    #most_popular = popular.keys()[popular.values().index(max(popular.values()))]

    #most_popular = list(popular.keys())[list(popular.values()).index(max(popular.values()))]
    #most_popular = max(popular.items(), key = operator.itemgetter(1))[0]

    most_popular = max([(value, key) for key, value in popular.items()])[1]

        
    #most_popular = popular.key(max(popular.values())) 
 # sorted_best_sales = sorted(best_sales_year_dict.items(), key=operator.itemgetter(1), reverse=True)

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
      "The {} had the most sales: {}".format(most_sales_model, max_sales),
      "The most popular year was {} with {} sales.".format(most_popular, popular[most_popular])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)

  # TODO: turn this into a PDF report
  
  #report = SimpleDocTemplate("/tmp/cars.pdf")

  #report_title = Paragraph(summary[0]+"\n"+summary[1]+"\n"+summary[2])
  #report.build([report_title])

  datatable = cars_dict_to_table(data)
  #table_style = [('GRID', (0,0), (-1,-1), 1, colors.black)]
  #report_table = Table(data=datatable, style=table_style, hAlign="LEFT")
  

  #report.build(["Most sales", report_table])


  reports.generate("/tmp/cars.pdf","Most sales", summary[0]+"\n"+summary[1]+"\n"+summary[2],datatable)
  # TODO: send the PDF report as an email attachment
  message = emails.generate("automation@example.com","student-03-96a55c7ae458@example.com", "Sales summary for last month",summary[0]+"\n"+summary[1]+"\n"+summary[2],"/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
